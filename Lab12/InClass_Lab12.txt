#include <limits.h>
#include <stdio.h>

#define V 6

int minDistance(int dist[], bool picked[])
{
    // Initialize min
    int min = INT_MAX;
    int min_index;

    for (int v = 0; v < V; v++)
        if (picked[v] == false && dist[v] <= min)
            min = dist[v], min_index = v;

    return min_index;
}


int printSolution(int dist[], int n, int src){
    double avg = 0;
    printf("- Shortest time from the selected city -\n");
    for (int i = 0; i < V; i++){
        avg += dist[i];
        printf("From %d to %d ---->  %d hours.\n", src, i, dist[i]);
    }
    //print the average time take to reach other cities
    avg = avg/5.0;
    printf("Average time from %d city- %.2f Hours", src, avg);
}


void dijkstra(int graph[V][V], int src)
{
    int dist[V]; // The output array

    bool visited[V]; //will be true if vertex i is included in shortest

    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, visited[i] = false;

    // from the src itself is always 0
    dist[src] = 0;

    // Find shortest path
    for (int i = 0; i<V-1; i++) {
        int u = minDistance(dist, visited);

        // Mark as picked
        visited[u] = true;

        for (int v = 0; v < V; v++)
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    printSolution(dist, V, src);
}

int main()
{
    //enter the graph need to find the shortest paths
    int graph[V][V] = { {0,10,0,0,15,5},
                        {10,0,10,30,0,0},
                        {0,10,0,12,5,0},
                        {0,30,12,0,0,20},
                        {15,0,5,0,0,0},
                        {5,0,0,20,0,0} };

    dijkstra(graph, 0);

    return 0;
}
